@startuml
title DisplayGadget Architecture - Clean & Modular
 

' ' ==== CORE INTERFACES ====
' interface IView {
'     +onEnter()
'     +onExit()
'     +render()
'     +handleInput(key: int)
' }

' interface ILcd {
'     +begin(cols: uint8_t, rows: uint8_t)
'     +clear()
'     +setCursor(col: uint8_t, row: uint8_t)
'     +print(str: const char*)
'     +printAt(col: uint8_t, row: uint8_t, str: const char*)
'     +printWrap(str: const char*)
'     +toggleBacklight()
' }

' interface IInputProvider {
'     +readInput(): int
' }

' interface INetwork {
'     +connect(ssid: const char*, pwd: const char*)
'     +isConnected(): bool
'     +localIP(): String
' }

' interface ISystem {
'     +restart()
'     +sleep(ms: uint32_t)
' }

' ' ==== SYSTEM CORE ====
' class Controller {
'     +init()
'     +loop()
'     -_input: IInputProvider*
'     -_display: ILcd*
'     -_network: INetwork*
'     -_system: ISystem*
'     -_viewController: ViewController
' }

' class ViewController {
'     +registerView(view: IView*)
'     +setActiveView(index: uint8_t)
'     +nextView()
'     +render()
'     +handleInput(key: int)
'     -_views: List<IView*>
' }

' ' ==== DISPLAY ADAPTER ====
' class Hd44780Adapter
' Hd44780Adapter ..|> ILcd

' ' ==== INPUT PROVIDERS ====
' class IRInputProvider
' class ButtonInputProvider
' class SerialInputProvider

' IRInputProvider ..|> IInputProvider
' ButtonInputProvider ..|> IInputProvider
' SerialInputProvider ..|> IInputProvider

' ' ==== VIEWS ====
' class DefaultView
' class NewsView
' class MenuView
' class MyCustomView

' IView <|-- DefaultView
' IView <|-- NewsView
' IView <|-- MenuView
' IView <|-- MyCustomView

' DefaultView ..> ILcd
' NewsView ..> ILcd
' MenuView ..> ILcd
' MyCustomView ..> ILcd

' DefaultView ..> INetwork
' NewsView ..> RSSReader
' DefaultView ..> DHTSensor
' DefaultView ..> TimeUtils

' ' ==== NETWORK ====
' class RSSReader
' class Weather
' class TimeUtils

' ' ==== SENSORS ====
' class DHTSensor

' ' ==== RELATIONSHIPS ====
' Controller --> ViewController : manages views
' Controller --> IInputProvider : uses
' Controller --> ILcd : renders on
' Controller --> INetwork : connects via
' Controller --> ISystem : manages system

@enduml
