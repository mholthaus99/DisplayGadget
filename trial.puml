@startuml
title InfoScreen Class Overview (with Interfaces)

' ==== INTERFACES ====
interface IViewRenderer {
    +begin()
    +drawText(...)
    +drawWrap(...)
    +clear()
    +toggleBacklight()
}

interface IInputDevice {
    +poll()
    +setCallbacks(InputCallbacks)
}

' ==== CONTROLLER LAYER ====
class Controller {
    +Controller(IViewRenderer&, IInputDevice&)
    +addView(View*)
    +init()
    +loop()
    +getSwitchViewCallback()
    -setInputDeviceCallbacks()
    -dispatchInputHandler()
    -_renderer : IViewRenderer&
    -_inputDevice : IInputDevice&
    -_viewController : ViewController
}

class ViewController {
    +ViewController(IViewRenderer&)
    +addView(View*)
    +switchTo(int)
    +getCurrentView() : View*
    -_currentView : View*
    -_renderer : IViewRenderer&
    -views : vector<View*>
}

' ==== VIEW LAYER ====
abstract class View {
    +onEnter()
    +onExit()
    +onPower()
    +onDigit(int)
    +onFunction()
    +onSkip()
    +onBack()
    +onVolumeUp()
    +onVolumeDown()
    +onChannelUp()
    +onChannelDown()
    +onPlayPause()
    +onEQ()
    +onRepeat()
    +render()
    +setViewController(IViewRenderer*)
    -_viewRenderer : IViewRenderer*
}

package "Views"{
class DefaultView
class FunctionView
class NewsView
}

' ==== RENDERER & INPUT ====
class Hd44780LcdRenderer {
    +Hd44780LcdRenderer(uint8_t, uint8_t, uint8_t)
    +begin()
    +drawText(...)
    +drawWrap(...)
    +clear()
    +toggleBacklight()
    -_lcd
    -_i2cAddress
    -_cols
    -_rows
    -_currentRow
    -_backlightOn
}

class IRReceiver {
    +IRReceiver(uint16_t)
    +begin()
    +poll()
    +setCallbacks(InputCallbacks)
    +onPower()
    +onFunction()
    +onSkip()
    +onBack()
    +onPlayPause()
    +onVolumeUp()
    +onVolumeDown()
    +onChannelUp()
    +onChannelDown()
    +onEQ()
    +onRepeat()
    +onDigit(int)
    -handleResultCode(uint32_t)
    -irrecv
    -results
    -registeredCallbacks : InputCallbacks
}

class InputCallbacks

' ==== MAIN ENTRY ====
class Main

' ==== RELATIONSHIPS ====
Main --> Controller : creates
Main --> Hd44780LcdRenderer : creates
Main --> IRReceiver : creates
Main --> Views : creates


Controller --> ViewController : manages
Controller --> IViewRenderer : uses
Controller --> IInputDevice : uses

ViewController --> Views : manages


DefaultView ..|> View 
FunctionView ..|> View 
NewsView ..|> View 

Hd44780LcdRenderer ..|> IViewRenderer : implements
IRReceiver ..|> IInputDevice : implements
IRReceiver --> InputCallbacks

View --> IViewRenderer : uses

@enduml