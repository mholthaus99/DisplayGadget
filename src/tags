!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BACK	system/ir_codes.h	/^  constexpr uint32_t BACK = 0x00FF22DD;$/;"	m	namespace:IRCodes
CHANNEL_DOWN	system/ir_codes.h	/^  constexpr uint32_t CHANNEL_DOWN = 0x00FFE01F;$/;"	m	namespace:IRCodes
CHANNEL_UP	system/ir_codes.h	/^  constexpr uint32_t CHANNEL_UP = 0x00FF906F;$/;"	m	namespace:IRCodes
DAYLIGHT_SAVING_TIME	secrets.h	/^#define DAYLIGHT_SAVING_TIME /;"	d
DHTPIN	sensors/dht_sensor.cpp	/^constexpr uint8_t DHTPIN = D6; \/\/\/< Pin used for DHT sensor$/;"	v
DHTSensor	sensors/dht_sensor.cpp	/^namespace DHTSensor$/;"	n	file:
DHTSensor	sensors/dht_sensor.h	/^namespace DHTSensor$/;"	n
DHTTYPE	sensors/dht_sensor.cpp	/^#define DHTTYPE /;"	d	file:
DIGITS	system/ir_codes.h	/^  constexpr uint32_t DIGITS[10] = {$/;"	m	namespace:IRCodes
DefaultView	views/default_view.h	/^    class DefaultView : public View$/;"	c	namespace:Views
DisplayMode	system/view_controller.h	/^enum DisplayMode$/;"	g
EQ	system/ir_codes.h	/^  constexpr uint32_t EQ = 0x00FF9867;$/;"	m	namespace:IRCodes
FUNCTION	system/ir_codes.h	/^  constexpr uint32_t FUNCTION = 0x00FFE21D;$/;"	m	namespace:IRCodes
FunctionView	views/menu_view.h	/^    class FunctionView : public View$/;"	c	namespace:Views
IRAction	system/ir_receiver.cpp	/^struct IRAction {$/;"	s	file:
IRCallbacks	system/ir_receiver.h	/^struct IRCallbacks {$/;"	s
IRCodes	system/ir_codes.h	/^namespace IRCodes {$/;"	n
IR_RECV_PIN	system/ir_receiver.cpp	/^constexpr uint16_t IR_RECV_PIN = D5;$/;"	v
LCD	system/display.cpp	/^namespace LCD$/;"	n	file:
LCD	system/display.h	/^namespace LCD$/;"	n
MAX_HEADLINES	network/rss_reader.cpp	/^    static constexpr size_t MAX_HEADLINES = 10;$/;"	m	namespace:RSS	file:
MAX_TITLE_LEN	network/rss_reader.cpp	/^    static constexpr size_t MAX_TITLE_LEN = 100;$/;"	m	namespace:RSS	file:
MODE_COUNT	system/view_controller.h	/^  MODE_COUNT$/;"	e	enum:DisplayMode
MODE_DEFAULT	system/view_controller.h	/^  MODE_DEFAULT,$/;"	e	enum:DisplayMode
MODE_MENU	system/view_controller.h	/^  MODE_MENU,$/;"	e	enum:DisplayMode
MODE_NETWORK	system/view_controller.h	/^  MODE_NETWORK,$/;"	e	enum:DisplayMode
MODE_NEWS	system/view_controller.h	/^  MODE_NEWS,$/;"	e	enum:DisplayMode
NEWS_URL	secrets.h	/^#define NEWS_URL /;"	d
NTP_SERVER	network/time_utils.cpp	/^  const char *NTP_SERVER = "time.nist.gov";$/;"	m	namespace:TimeUtils	file:
NewsView	views/news_view.h	/^    class NewsView : public View$/;"	c	namespace:Views
OPENWEATHERMAP_API_KEY	secrets.h	/^#define OPENWEATHERMAP_API_KEY /;"	d
PLAY_PAUSE	system/ir_codes.h	/^  constexpr uint32_t PLAY_PAUSE = 0x00FF02FD;$/;"	m	namespace:IRCodes
POWER	system/ir_codes.h	/^  constexpr uint32_t POWER = 0x00FFA25D;$/;"	m	namespace:IRCodes
REGION	secrets.h	/^#define REGION /;"	d
REPEAT	system/ir_codes.h	/^  constexpr uint32_t REPEAT = 0x00FFB04F;$/;"	m	namespace:IRCodes
RSS	network/rss_reader.cpp	/^namespace RSS$/;"	n	file:
RSS	network/rss_reader.h	/^namespace RSS {$/;"	n
SKIP	system/ir_codes.h	/^  constexpr uint32_t SKIP = 0x00FFC23D;$/;"	m	namespace:IRCodes
SYNC_INTERVAL	network/time_utils.cpp	/^  const unsigned long SYNC_INTERVAL = 10UL * 60UL * 1000UL; \/\/ 10 minutes$/;"	m	namespace:TimeUtils	file:
TIMEZONE_OFFSET	secrets.h	/^#define TIMEZONE_OFFSET /;"	d
TimeUtils	network/time_utils.cpp	/^namespace TimeUtils$/;"	n	file:
TimeUtils	network/time_utils.h	/^namespace TimeUtils$/;"	n
UPDATE_INTERVAL	network/weather.cpp	/^  const unsigned long UPDATE_INTERVAL = 10UL * 60UL * 1000UL; \/\/ 10 minutes$/;"	m	namespace:Weather	file:
VOLUME_DOWN	system/ir_codes.h	/^  constexpr uint32_t VOLUME_DOWN = 0x00FFA857;$/;"	m	namespace:IRCodes
VOLUME_UP	system/ir_codes.h	/^  constexpr uint32_t VOLUME_UP = 0x00FF629D;$/;"	m	namespace:IRCodes
View	views/view.h	/^    class View$/;"	c	namespace:Views
ViewController	system/view_controller.cpp	/^namespace ViewController$/;"	n	file:
ViewController	system/view_controller.h	/^namespace ViewController$/;"	n
Views	system/view_controller.h	/^namespace Views$/;"	n
Views	views/default_view.cpp	/^namespace Views$/;"	n	file:
Views	views/default_view.h	/^namespace Views$/;"	n
Views	views/menu_view.cpp	/^namespace Views$/;"	n	file:
Views	views/menu_view.h	/^namespace Views$/;"	n
Views	views/news_view.cpp	/^namespace Views$/;"	n	file:
Views	views/news_view.h	/^namespace Views$/;"	n
Views	views/view.h	/^namespace Views$/;"	n
WIFI_PASS	secrets.h	/^#define WIFI_PASS /;"	d
WIFI_SSID	secrets.h	/^#define WIFI_SSID /;"	d
Weather	network/weather.cpp	/^namespace Weather$/;"	n	file:
Weather	network/weather.h	/^namespace Weather$/;"	n
WiFiUtils	network/network.cpp	/^namespace WiFiUtils$/;"	n	file:
WiFiUtils	network/network.h	/^namespace WiFiUtils$/;"	n
ZIP_CODE	secrets.h	/^#define ZIP_CODE /;"	d
app_init	system/controller.cpp	/^void app_init()$/;"	f	signature:()
app_init	system/controller.h	/^void app_init();$/;"	p	signature:()
cachedDesc	network/weather.cpp	/^  static String cachedDesc = "Unavailable";$/;"	m	namespace:Weather	file:
cachedHeadlines	network/rss_reader.cpp	/^    static char cachedHeadlines[MAX_HEADLINES][MAX_TITLE_LEN];$/;"	m	namespace:RSS	file:
cachedLocation	network/weather.cpp	/^  static String cachedLocation = "Unknown";$/;"	m	namespace:Weather	file:
cachedTemp	network/weather.cpp	/^  static String cachedTemp = "--F";$/;"	m	namespace:Weather	file:
callbackField	system/ir_receiver.cpp	/^  void (**callbackField)();  \/\/ pointer to pointer!$/;"	m	struct:IRAction	file:
clear	system/display.cpp	/^    void clear()$/;"	f	namespace:LCD	signature:()
clear	system/display.h	/^    void clear();$/;"	p	namespace:LCD	signature:()
clearHeadlines	network/rss_reader.cpp	/^    static void clearHeadlines()$/;"	f	namespace:RSS	signature:()
code	system/ir_receiver.cpp	/^  uint32_t code;$/;"	m	struct:IRAction	file:
currentHeadlineIndex	network/rss_reader.cpp	/^    static size_t currentHeadlineIndex = 0;$/;"	m	namespace:RSS	file:
currentMode	system/view_controller.cpp	/^  static DisplayMode currentMode = MODE_DEFAULT;$/;"	m	namespace:ViewController	file:
currentView	system/view_controller.cpp	/^  static View *currentView = nullptr;$/;"	m	namespace:ViewController	file:
cursorLine	system/display.cpp	/^    static int cursorLine = 0;$/;"	m	namespace:LCD	file:
dht	sensors/dht_sensor.cpp	/^  static DHT dht(DHTPIN, DHTTYPE); \/\/ Fully initialize here$/;"	p	namespace:DHTSensor	file:	signature:(DHTPIN, DHTTYPE)
dhtHumBuf	sensors/dht_sensor.cpp	/^  static char dhtHumBuf[16];$/;"	m	namespace:DHTSensor	file:
dhtTempBuf	sensors/dht_sensor.cpp	/^  static char dhtTempBuf[16];$/;"	m	namespace:DHTSensor	file:
fetch	network/rss_reader.cpp	/^void fetch()$/;"	f	namespace:RSS	signature:()
fetch	network/rss_reader.h	/^void fetch();$/;"	p	namespace:RSS	signature:()
fetch	network/weather.cpp	/^  bool fetch()$/;"	f	namespace:Weather	signature:()
fetch	network/weather.h	/^    bool fetch();$/;"	p	namespace:Weather	signature:()
getCurrentView	system/view_controller.cpp	/^  View *getCurrentView()$/;"	f	namespace:ViewController	signature:()
getCurrentView	system/view_controller.h	/^  Views::View *getCurrentView();$/;"	p	namespace:ViewController	signature:()
getDSTOffset	network/time_utils.cpp	/^  static int getDSTOffset()$/;"	f	namespace:TimeUtils	signature:()
getDescription	network/weather.cpp	/^  const char *getDescription()$/;"	f	namespace:Weather	signature:()
getDescription	network/weather.h	/^    const char *getDescription();$/;"	p	namespace:Weather	signature:()
getFormattedHumidity	sensors/dht_sensor.cpp	/^  const char *getFormattedHumidity()$/;"	f	namespace:DHTSensor	signature:()
getFormattedHumidity	sensors/dht_sensor.h	/^    const char *getFormattedHumidity();$/;"	p	namespace:DHTSensor	signature:()
getFormattedTemperature	sensors/dht_sensor.cpp	/^  const char *getFormattedTemperature()$/;"	f	namespace:DHTSensor	signature:()
getFormattedTemperature	sensors/dht_sensor.h	/^    const char *getFormattedTemperature();$/;"	p	namespace:DHTSensor	signature:()
getFormattedTime	network/time_utils.cpp	/^  const char *getFormattedTime()$/;"	f	namespace:TimeUtils	signature:()
getFormattedTime	network/time_utils.h	/^    const char *getFormattedTime();$/;"	p	namespace:TimeUtils	signature:()
getHumidity	sensors/dht_sensor.cpp	/^  float getHumidity()$/;"	f	namespace:DHTSensor	signature:()
getHumidity	sensors/dht_sensor.h	/^    float getHumidity();     \/\/ Returns relative humidity %$/;"	p	namespace:DHTSensor	signature:()
getLocation	network/weather.cpp	/^  const char *getLocation()$/;"	f	namespace:Weather	signature:()
getLocation	network/weather.h	/^    const char *getLocation();$/;"	p	namespace:Weather	signature:()
getMode	system/view_controller.cpp	/^  DisplayMode getMode()$/;"	f	namespace:ViewController	signature:()
getMode	system/view_controller.h	/^  DisplayMode getMode();$/;"	p	namespace:ViewController	signature:()
getNextHeadline	network/rss_reader.cpp	/^    const char *getNextHeadline()$/;"	f	namespace:RSS	signature:()
getNextHeadline	network/rss_reader.h	/^const char* getNextHeadline();$/;"	p	namespace:RSS	signature:()
getSummary	network/weather.cpp	/^  const char *getSummary()$/;"	f	namespace:Weather	signature:()
getSummary	network/weather.h	/^    const char *getSummary();$/;"	p	namespace:Weather	signature:()
getTemperature	network/weather.cpp	/^  const char *getTemperature()$/;"	f	namespace:Weather	signature:()
getTemperature	network/weather.h	/^    const char *getTemperature();$/;"	p	namespace:Weather	signature:()
getTemperatureF	sensors/dht_sensor.cpp	/^  float getTemperatureF()$/;"	f	namespace:DHTSensor	signature:()
getTemperatureF	sensors/dht_sensor.h	/^    float getTemperatureF(); \/\/ Returns Fahrenheit$/;"	p	namespace:DHTSensor	signature:()
getprint_wifi_dns	network/network.cpp	/^  const char *getprint_wifi_dns()$/;"	f	namespace:WiFiUtils	signature:()
getprint_wifi_dns	network/network.h	/^    const char *getprint_wifi_dns();$/;"	p	namespace:WiFiUtils	signature:()
getprint_wifi_gateway	network/network.cpp	/^  const char *getprint_wifi_gateway()$/;"	f	namespace:WiFiUtils	signature:()
getprint_wifi_gateway	network/network.h	/^    const char *getprint_wifi_gateway();$/;"	p	namespace:WiFiUtils	signature:()
getprint_wifi_ip	network/network.cpp	/^  const char *getprint_wifi_ip()$/;"	f	namespace:WiFiUtils	signature:()
getprint_wifi_ip	network/network.h	/^    const char *getprint_wifi_ip();$/;"	p	namespace:WiFiUtils	signature:()
getprint_wifi_password	network/network.cpp	/^  const char *getprint_wifi_password()$/;"	f	namespace:WiFiUtils	signature:()
getprint_wifi_password	network/network.h	/^    const char *getprint_wifi_password();$/;"	p	namespace:WiFiUtils	signature:()
getprint_wifi_ssid	network/network.cpp	/^  const char *getprint_wifi_ssid()$/;"	f	namespace:WiFiUtils	signature:()
getprint_wifi_ssid	network/network.h	/^    const char *getprint_wifi_ssid();$/;"	p	namespace:WiFiUtils	signature:()
getprint_wifi_subnet	network/network.cpp	/^  const char *getprint_wifi_subnet()$/;"	f	namespace:WiFiUtils	signature:()
getprint_wifi_subnet	network/network.h	/^    const char *getprint_wifi_subnet();$/;"	p	namespace:WiFiUtils	signature:()
handleResultCode	system/ir_receiver.cpp	/^static void handleResultCode(uint32_t code)$/;"	f	file:	signature:(uint32_t code)
headlineCount	network/rss_reader.cpp	/^    static size_t headlineCount = 0;$/;"	m	namespace:RSS	file:
init	network/time_utils.cpp	/^  void init()$/;"	f	namespace:TimeUtils	signature:()
init	network/time_utils.h	/^    void init();$/;"	p	namespace:TimeUtils	signature:()
init	network/weather.cpp	/^  void init()$/;"	f	namespace:Weather	signature:()
init	network/weather.h	/^    void init();$/;"	p	namespace:Weather	signature:()
init	sensors/dht_sensor.cpp	/^  void init()$/;"	f	namespace:DHTSensor	signature:()
init	sensors/dht_sensor.h	/^    void init(); \/\/ Call during setup()$/;"	p	namespace:DHTSensor	signature:()
init	system/display.cpp	/^    void init()$/;"	f	namespace:LCD	signature:()
init	system/display.h	/^    void init();$/;"	p	namespace:LCD	signature:()
irActions	system/ir_receiver.cpp	/^static const IRAction irActions[] = {$/;"	v	file:
ir_init	system/ir_receiver.cpp	/^void ir_init()$/;"	f	signature:()
ir_init	system/ir_receiver.h	/^void ir_init();$/;"	p	signature:()
ir_poll	system/ir_receiver.cpp	/^void ir_poll()$/;"	f	signature:()
ir_poll	system/ir_receiver.h	/^void ir_poll();$/;"	p	signature:()
ir_registerCallbacks	system/ir_receiver.cpp	/^void ir_registerCallbacks(const IRCallbacks &callbacks)$/;"	f	signature:(const IRCallbacks &callbacks)
ir_registerCallbacks	system/ir_receiver.h	/^void ir_registerCallbacks(const IRCallbacks& callbacks);$/;"	p	signature:(const IRCallbacks& callbacks)
irhandle_back	system/controller.cpp	/^void irhandle_back()$/;"	f	signature:()
irhandle_back	system/controller.h	/^void irhandle_back();$/;"	p	signature:()
irhandle_channel_down	system/controller.cpp	/^void irhandle_channel_down()$/;"	f	signature:()
irhandle_channel_down	system/controller.h	/^void irhandle_channel_down();$/;"	p	signature:()
irhandle_channel_up	system/controller.cpp	/^void irhandle_channel_up()$/;"	f	signature:()
irhandle_channel_up	system/controller.h	/^void irhandle_channel_up();$/;"	p	signature:()
irhandle_digit	system/controller.cpp	/^void irhandle_digit(int d)$/;"	f	signature:(int d)
irhandle_digit	system/controller.h	/^void irhandle_digit(int digit);$/;"	p	signature:(int digit)
irhandle_eq	system/controller.cpp	/^void irhandle_eq()$/;"	f	signature:()
irhandle_eq	system/controller.h	/^void irhandle_eq();$/;"	p	signature:()
irhandle_func	system/controller.cpp	/^void irhandle_func()$/;"	f	signature:()
irhandle_func	system/controller.h	/^void irhandle_func();$/;"	p	signature:()
irhandle_play_pause	system/controller.cpp	/^void irhandle_play_pause()$/;"	f	signature:()
irhandle_play_pause	system/controller.h	/^void irhandle_play_pause();$/;"	p	signature:()
irhandle_power	system/controller.cpp	/^void irhandle_power()$/;"	f	signature:()
irhandle_power	system/controller.h	/^void irhandle_power();$/;"	p	signature:()
irhandle_repeat	system/controller.cpp	/^void irhandle_repeat()$/;"	f	signature:()
irhandle_repeat	system/controller.h	/^void irhandle_repeat();$/;"	p	signature:()
irhandle_skip	system/controller.cpp	/^void irhandle_skip()$/;"	f	signature:()
irhandle_skip	system/controller.h	/^void irhandle_skip();$/;"	p	signature:()
irhandle_volume_down	system/controller.cpp	/^void irhandle_volume_down()$/;"	f	signature:()
irhandle_volume_down	system/controller.h	/^void irhandle_volume_down();$/;"	p	signature:()
irhandle_volume_up	system/controller.cpp	/^void irhandle_volume_up()$/;"	f	signature:()
irhandle_volume_up	system/controller.h	/^void irhandle_volume_up();$/;"	p	signature:()
irrecv	system/ir_receiver.cpp	/^static IRrecv irrecv(IR_RECV_PIN);$/;"	p	file:	signature:(IR_RECV_PIN)
label	system/ir_receiver.cpp	/^  const char* label;$/;"	m	struct:IRAction	file:
lastNTPSync	network/time_utils.cpp	/^  static unsigned long lastNTPSync = 0;$/;"	m	namespace:TimeUtils	file:
lastRSSUpdate	network/rss_reader.cpp	/^    static unsigned long lastRSSUpdate = 0;$/;"	m	namespace:RSS	file:
lastSync	network/time_utils.cpp	/^  static unsigned long lastSync = 0;$/;"	m	namespace:TimeUtils	file:
lastSyncEpoch	network/time_utils.cpp	/^  static time_t lastSyncEpoch = 0;$/;"	m	namespace:TimeUtils	file:
lastToggle	views/default_view.h	/^        unsigned long lastToggle = 0;$/;"	m	class:Views::DefaultView
lastWeatherFetchMillis	network/weather.cpp	/^  static unsigned long lastWeatherFetchMillis = 0;$/;"	m	namespace:Weather	file:
loop	main.cpp	/^void loop() {$/;"	f	signature:()
onBack	system/ir_receiver.h	/^  void (*onBack)();      \/\/\/< Callback for back button press$/;"	m	struct:IRCallbacks
onBack	views/menu_view.cpp	/^    void FunctionView::onBack()$/;"	f	class:Views::FunctionView	signature:()
onBack	views/view.h	/^        virtual void onBack() {}$/;"	f	class:Views::View	signature:()
onChannelDown	system/ir_receiver.h	/^  void (*onChannelDown)();\/\/\/< Callback for channel down button press$/;"	m	struct:IRCallbacks
onChannelDown	views/view.h	/^        virtual void onChannelDown() {}$/;"	f	class:Views::View	signature:()
onChannelUp	system/ir_receiver.h	/^  void (*onChannelUp)(); \/\/\/< Callback for channel up button press$/;"	m	struct:IRCallbacks
onChannelUp	views/view.h	/^        virtual void onChannelUp() {}$/;"	f	class:Views::View	signature:()
onDigit	system/ir_receiver.h	/^  void (*onDigit)(int);    \/\/\/< Callback for digit button press (0–9)$/;"	m	struct:IRCallbacks
onDigit	views/menu_view.cpp	/^    void FunctionView::onDigit(int digit)$/;"	f	class:Views::FunctionView	signature:(int digit)
onDigit	views/view.h	/^        virtual void onDigit(int digit) {}$/;"	f	class:Views::View	signature:(int digit)
onEQ	system/ir_receiver.h	/^  void (*onEQ)();        \/\/\/< Callback for equalizer button press$/;"	m	struct:IRCallbacks
onEQ	views/view.h	/^        virtual void onEQ() {}$/;"	f	class:Views::View	signature:()
onEnter	views/menu_view.cpp	/^    void FunctionView::onEnter()$/;"	f	class:Views::FunctionView	signature:()
onEnter	views/view.h	/^        virtual void onEnter() {}$/;"	f	class:Views::View	signature:()
onExit	views/view.h	/^        virtual void onExit() {}$/;"	f	class:Views::View	signature:()
onFunction	system/ir_receiver.h	/^  void (*onFunction)();    \/\/\/< Callback for function button press$/;"	m	struct:IRCallbacks
onFunction	views/menu_view.cpp	/^    void FunctionView::onFunction()$/;"	f	class:Views::FunctionView	signature:()
onFunction	views/view.h	/^        virtual void onFunction()$/;"	f	class:Views::View	signature:()
onPlayPause	system/ir_receiver.h	/^  void (*onPlayPause)(); \/\/\/< Callback for play\/pause button press$/;"	m	struct:IRCallbacks
onPlayPause	views/view.h	/^        virtual void onPlayPause() {}$/;"	f	class:Views::View	signature:()
onPower	system/ir_receiver.h	/^  void (*onPower)();       \/\/\/< Callback for power button press$/;"	m	struct:IRCallbacks
onPower	views/view.h	/^        virtual void onPower()$/;"	f	class:Views::View	signature:()
onRepeat	system/ir_receiver.h	/^  void (*onRepeat)();    \/\/\/< Callback for repeat button press$/;"	m	struct:IRCallbacks
onRepeat	views/view.h	/^        virtual void onRepeat() {}$/;"	f	class:Views::View	signature:()
onSkip	system/ir_receiver.h	/^  void (*onSkip)();      \/\/\/< Callback for skip button press$/;"	m	struct:IRCallbacks
onSkip	views/news_view.cpp	/^    void NewsView::onSkip()$/;"	f	class:Views::NewsView	signature:()
onSkip	views/view.h	/^        virtual void onSkip() {}$/;"	f	class:Views::View	signature:()
onVolumeDown	system/ir_receiver.h	/^  void (*onVolumeDown)();\/\/\/< Callback for volume down button press$/;"	m	struct:IRCallbacks
onVolumeDown	views/view.h	/^        virtual void onVolumeDown() {}$/;"	f	class:Views::View	signature:()
onVolumeUp	system/ir_receiver.h	/^  void (*onVolumeUp)();  \/\/\/< Callback for volume up button press$/;"	m	struct:IRCallbacks
onVolumeUp	views/view.h	/^        virtual void onVolumeUp() {}$/;"	f	class:Views::View	signature:()
override	views/default_view.h	/^        void render() override;$/;"	m	class:Views::DefaultView
override	views/menu_view.h	/^        void onBack() override;$/;"	m	class:Views::FunctionView
override	views/menu_view.h	/^        void onDigit(int digit) override;$/;"	m	class:Views::FunctionView
override	views/menu_view.h	/^        void onEnter() override;$/;"	m	class:Views::FunctionView
override	views/menu_view.h	/^        void onFunction() override;$/;"	m	class:Views::FunctionView
override	views/menu_view.h	/^        void render() override;$/;"	m	class:Views::FunctionView
override	views/news_view.h	/^        void onSkip() override;$/;"	m	class:Views::NewsView
override	views/news_view.h	/^        void render() override;$/;"	m	class:Views::NewsView
password	network/network.cpp	/^  static const char *password = WIFI_PASS;$/;"	m	namespace:WiFiUtils	file:
print	system/display.cpp	/^    void print(const char *message)$/;"	f	namespace:LCD	signature:(const char *message)
print	system/display.h	/^    void print(const char *message);$/;"	p	namespace:LCD	signature:(const char *message)
printAt	system/display.cpp	/^    void printAt(const char *message, byte line)$/;"	f	namespace:LCD	signature:(const char *message, byte line)
printAt	system/display.cpp	/^    void printAt(const char *message, byte line, byte col)$/;"	f	namespace:LCD	signature:(const char *message, byte line, byte col)
printAt	system/display.h	/^    void printAt(const char *message, byte line);$/;"	p	namespace:LCD	signature:(const char *message, byte line)
printAt	system/display.h	/^    void printAt(const char *message, byte line, byte col);$/;"	p	namespace:LCD	signature:(const char *message, byte line, byte col)
printMultiLine	system/display.cpp	/^    void printMultiLine(const char *message)$/;"	f	namespace:LCD	signature:(const char *message)
printMultiLine	system/display.h	/^    void printMultiLine(const char *message);$/;"	p	namespace:LCD	signature:(const char *message)
printWrapped	system/display.cpp	/^    void printWrapped(const char *message)$/;"	f	namespace:LCD	signature:(const char *message)
printWrapped	system/display.h	/^    void printWrapped(const char *message);$/;"	p	namespace:LCD	signature:(const char *message)
registeredCallbacks	system/ir_receiver.cpp	/^static IRCallbacks registeredCallbacks = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr};$/;"	v	file:
render	views/default_view.cpp	/^    void DefaultView::render()$/;"	f	class:Views::DefaultView	signature:()
render	views/menu_view.cpp	/^    void FunctionView::render(){$/;"	f	class:Views::FunctionView	signature:()
render	views/news_view.cpp	/^    void NewsView::render()$/;"	f	class:Views::NewsView	signature:()
render	views/view.h	/^        virtual void render() = 0;$/;"	p	class:Views::View	signature:()
renderCurrentMode	system/controller.cpp	/^void renderCurrentMode()$/;"	f	signature:()
renderCurrentMode	system/controller.h	/^void renderCurrentMode();$/;"	p	signature:()
renderCurrentView	system/view_controller.cpp	/^  void renderCurrentView()$/;"	f	namespace:ViewController	signature:()
renderCurrentView	system/view_controller.h	/^  void renderCurrentView();$/;"	p	namespace:ViewController	signature:()
results	system/ir_receiver.cpp	/^static decode_results results;$/;"	v	file:
setMode	system/view_controller.cpp	/^  void setMode(DisplayMode mode)$/;"	f	namespace:ViewController	signature:(DisplayMode mode)
setMode	system/view_controller.h	/^  void setMode(DisplayMode mode);$/;"	p	namespace:ViewController	signature:(DisplayMode mode)
setSwitchViewCallback	views/menu_view.cpp	/^    void FunctionView::setSwitchViewCallback(SwitchViewCallback cb)$/;"	f	class:Views::FunctionView	signature:(SwitchViewCallback cb)
setSwitchViewCallback	views/menu_view.h	/^        void setSwitchViewCallback(SwitchViewCallback cb);$/;"	p	class:Views::FunctionView	signature:(SwitchViewCallback cb)
setup	main.cpp	/^void setup() {$/;"	f	signature:()
showingClimate	views/default_view.h	/^        bool showingClimate = false;$/;"	m	class:Views::DefaultView
ssid	network/network.cpp	/^  static const char *ssid = WIFI_SSID;$/;"	m	namespace:WiFiUtils	file:
switchView	system/view_controller.cpp	/^  void switchView(DisplayMode mode)$/;"	f	namespace:ViewController	signature:(DisplayMode mode)
switchView	system/view_controller.h	/^  void switchView(DisplayMode mode);$/;"	p	namespace:ViewController	signature:(DisplayMode mode)
switchViewCallback	views/menu_view.h	/^        SwitchViewCallback switchViewCallback = nullptr;$/;"	m	class:Views::FunctionView
syncWithNTP	network/time_utils.cpp	/^  static bool syncWithNTP()$/;"	f	namespace:TimeUtils	signature:()
timeOfLastTitleChange	views/news_view.h	/^        unsigned long timeOfLastTitleChange = 0;$/;"	m	class:Views::NewsView
toggleBacklight	system/display.cpp	/^    void toggleBacklight()$/;"	f	namespace:LCD	signature:()
toggleBacklight	system/display.h	/^    void toggleBacklight();$/;"	p	namespace:LCD	signature:()
url	network/rss_reader.cpp	/^    const char *url = NEWS_URL;$/;"	m	namespace:RSS	file:
weatherSummary	network/weather.cpp	/^  static String weatherSummary = "Weather data not yet fetched";$/;"	m	namespace:Weather	file:
wifi_connect	network/network.cpp	/^  void wifi_connect(void (*statusCallback)(const char *))$/;"	f	namespace:WiFiUtils	signature:(void (*statusCallback)(const char *))
wifi_connect	network/network.h	/^    void wifi_connect(void (*statusCallback)(const char *));$/;"	p	namespace:WiFiUtils	signature:(void (*statusCallback)(const char *))
wifi_isConnected	network/network.cpp	/^  bool wifi_isConnected()$/;"	f	namespace:WiFiUtils	signature:()
wifi_isConnected	network/network.h	/^    bool wifi_isConnected();$/;"	p	namespace:WiFiUtils	signature:()
~View	views/view.h	/^        virtual ~View() {}$/;"	f	class:Views::View	signature:()
